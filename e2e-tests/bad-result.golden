Check file://ROOT/e2e-tests/bad-00-stringU-booleanU--unexpected-negatable.ts
Check file://ROOT/e2e-tests/bad-01-stringU-booleanU--unexpected-collect.ts
Check file://ROOT/e2e-tests/bad-02-stringU-booleanU--unexpected-required.ts
Check file://ROOT/e2e-tests/bad-03-stringU-booleanU--unexpected-default.ts
Check file://ROOT/e2e-tests/bad-04-string0-booleanU--unexpected-negatable.ts
Check file://ROOT/e2e-tests/bad-05-string0-booleanU--unexpected-collect.ts
Check file://ROOT/e2e-tests/bad-06-string0-booleanU--unexpected-required.ts
Check file://ROOT/e2e-tests/bad-07-string0-booleanU--unexpected-default.ts
Check file://ROOT/e2e-tests/bad-10-string1-booleanU--unexpected-negatable.ts
Check file://ROOT/e2e-tests/bad-11-string1-booleanU--unexpected-collect.ts
Check file://ROOT/e2e-tests/bad-12-string1-booleanU--unexpected-required.ts
Check file://ROOT/e2e-tests/bad-13-string1-booleanU--unexpected-default.ts
Check file://ROOT/e2e-tests/bad-20-stringU-boolean1--unexpected-negatable.ts
Check file://ROOT/e2e-tests/bad-21-stringU-boolean1--unexpected-collect.ts
Check file://ROOT/e2e-tests/bad-22-stringU-boolean1--unexpected-required.ts
Check file://ROOT/e2e-tests/bad-23-stringU-boolean1--unexpected-default.ts
Check file://ROOT/e2e-tests/bad-30-string1-boolean1--unexpected-negatable.ts
Check file://ROOT/e2e-tests/bad-31-string1-boolean1--unexpected-collect.ts
Check file://ROOT/e2e-tests/bad-32-string1-boolean1--unexpected-required.ts
Check file://ROOT/e2e-tests/bad-33-string1-boolean1--unexpected-default.ts
error: TS2322 [ERROR]: Type 'readonly ["XXX"]' is not assignable to type 'undefined'.
  collect: ["XXX"],
  ~~~~~~~
    at file://ROOT/e2e-tests/bad-05-string0-booleanU--unexpected-collect.ts:4:3

    The expected type comes from property 'collect' which is declared here on type '{ boolean?: never[] | undefined; string?: [] | undefined; collect?: undefined; negatable?: never[] | undefined; default?: ({} & {}) | undefined; stopEarly?: boolean | undefined; alias?: Record<string, string | string[]> | undefined; ... 5 more ...; supressHelp?: boolean | undefined; }'
        collect?: EnsureLiteralArray<CollectKeys>[number] extends StringKeys[number]
        ~~~~~~~
        at file://ROOT/parse-args.ts:77:5

TS2322 [ERROR]: Type 'readonly ["XXX"]' is not assignable to type 'undefined'.
  collect: ["XXX"],
  ~~~~~~~
    at file://ROOT/e2e-tests/bad-11-string1-booleanU--unexpected-collect.ts:4:3

    The expected type comes from property 'collect' which is declared here on type '{ boolean?: never[] | undefined; string?: ["name"] | undefined; collect?: undefined; negatable?: never[] | undefined; default?: ({ name?: string | string[] | undefined; } & {}) | undefined; stopEarly?: boolean | undefined; ... 6 more ...; supressHelp?: boolean | undefined; }'
        collect?: EnsureLiteralArray<CollectKeys>[number] extends StringKeys[number]
        ~~~~~~~
        at file://ROOT/parse-args.ts:77:5

TS2339 [ERROR]: Property 'name' does not exist on type 'never'.
  The intersection 'Parsed<"name", "name" | "color", string, never, "name" | "color">' was reduced to 'never' because property 'name' has conflicting types in some constituents.
const _name: string | undefined = parsed.name;
                                         ~~~~
    at file://ROOT/e2e-tests/bad-30-string1-boolean1--unexpected-negatable.ts:8:42

TS2322 [ERROR]: Type 'readonly ["color"]' is not assignable to type 'undefined'.
  collect: ["color"],
  ~~~~~~~
    at file://ROOT/e2e-tests/bad-31-string1-boolean1--unexpected-collect.ts:5:3

    The expected type comes from property 'collect' which is declared here on type '{ boolean?: ["color"] | undefined; string?: ["name"] | undefined; collect?: undefined; negatable?: ["color"] | undefined; default?: ({ name?: string | string[] | undefined; } & { color?: boolean | undefined; }) | undefined; ... 7 more ...; supressHelp?: boolean | undefined; }'
        collect?: EnsureLiteralArray<CollectKeys>[number] extends StringKeys[number]
        ~~~~~~~
        at file://ROOT/parse-args.ts:77:5

TS2322 [ERROR]: Type 'readonly ["xxxx"]' is not assignable to type 'undefined'.
  required: ["xxxx"],
  ~~~~~~~~
    at file://ROOT/e2e-tests/bad-32-string1-boolean1--unexpected-required.ts:5:3

    The expected type comes from property 'required' which is declared here on type '{ boolean?: ["color"] | undefined; string?: ["name"] | undefined; collect?: readonly string[] | undefined; negatable?: ["color"] | undefined; default?: ({ name?: string | string[] | undefined; } & { ...; }) | undefined; ... 7 more ...; supressHelp?: boolean | undefined; }'
        required?: EnsureLiteralArray<
        ~~~~~~~~
        at file://ROOT/parse-args.ts:89:5

TS2353 [ERROR]: Object literal may only specify known properties, and '"XXX"' does not exist in type '{ name?: string | string[] | undefined; } & { color?: boolean | undefined; }'.
  default: {"XXX":"FOO"},
            ~~~~~
    at file://ROOT/e2e-tests/bad-33-string1-boolean1--unexpected-default.ts:5:13

    The expected type comes from property 'default' which is declared here on type '{ boolean?: ["color"] | undefined; string?: ["name"] | undefined; collect?: readonly string[] | undefined; negatable?: ["color"] | undefined; default?: ({ name?: string | string[] | undefined; } & { ...; }) | undefined; ... 7 more ...; supressHelp?: boolean | undefined; }'
        default?: TDefaults;
        ~~~~~~~
        at file://ROOT/parse-args.ts:81:5

Found 6 errors.
